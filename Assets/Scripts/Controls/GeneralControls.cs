//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controls/GeneralControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GeneralControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GeneralControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GeneralControls"",
    ""maps"": [
        {
            ""name"": ""DefaultMapping"",
            ""id"": ""026bf187-d26b-49ef-bb38-c0ed3249524d"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""fc7ce480-3b48-40f8-96cb-1d2c1d87a175"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlacePoint"",
                    ""type"": ""Button"",
                    ""id"": ""3930ce6e-2c62-4f25-bbcd-b13d1a2ffd6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PanCameraLock"",
                    ""type"": ""Button"",
                    ""id"": ""9b09f950-8d54-45d4-8cbf-dd520e23e914"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PanCameraMove"",
                    ""type"": ""Value"",
                    ""id"": ""4cc510ee-288e-4f9c-b5db-c542f75365bf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""81246e4c-a529-464f-b328-62d292281117"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6132a3ea-2e77-4b5c-869f-b842488d0c42"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlacePoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1db75516-f157-411f-9bf2-1d7f3c6281bc"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PanCameraLock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9082b8e2-2fdb-45d8-ba83-9a9b757f1507"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PanCameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DefaultMapping
        m_DefaultMapping = asset.FindActionMap("DefaultMapping", throwIfNotFound: true);
        m_DefaultMapping_Zoom = m_DefaultMapping.FindAction("Zoom", throwIfNotFound: true);
        m_DefaultMapping_PlacePoint = m_DefaultMapping.FindAction("PlacePoint", throwIfNotFound: true);
        m_DefaultMapping_PanCameraLock = m_DefaultMapping.FindAction("PanCameraLock", throwIfNotFound: true);
        m_DefaultMapping_PanCameraMove = m_DefaultMapping.FindAction("PanCameraMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DefaultMapping
    private readonly InputActionMap m_DefaultMapping;
    private List<IDefaultMappingActions> m_DefaultMappingActionsCallbackInterfaces = new List<IDefaultMappingActions>();
    private readonly InputAction m_DefaultMapping_Zoom;
    private readonly InputAction m_DefaultMapping_PlacePoint;
    private readonly InputAction m_DefaultMapping_PanCameraLock;
    private readonly InputAction m_DefaultMapping_PanCameraMove;
    public struct DefaultMappingActions
    {
        private @GeneralControls m_Wrapper;
        public DefaultMappingActions(@GeneralControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_DefaultMapping_Zoom;
        public InputAction @PlacePoint => m_Wrapper.m_DefaultMapping_PlacePoint;
        public InputAction @PanCameraLock => m_Wrapper.m_DefaultMapping_PanCameraLock;
        public InputAction @PanCameraMove => m_Wrapper.m_DefaultMapping_PanCameraMove;
        public InputActionMap Get() { return m_Wrapper.m_DefaultMapping; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultMappingActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultMappingActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultMappingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultMappingActionsCallbackInterfaces.Add(instance);
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @PlacePoint.started += instance.OnPlacePoint;
            @PlacePoint.performed += instance.OnPlacePoint;
            @PlacePoint.canceled += instance.OnPlacePoint;
            @PanCameraLock.started += instance.OnPanCameraLock;
            @PanCameraLock.performed += instance.OnPanCameraLock;
            @PanCameraLock.canceled += instance.OnPanCameraLock;
            @PanCameraMove.started += instance.OnPanCameraMove;
            @PanCameraMove.performed += instance.OnPanCameraMove;
            @PanCameraMove.canceled += instance.OnPanCameraMove;
        }

        private void UnregisterCallbacks(IDefaultMappingActions instance)
        {
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @PlacePoint.started -= instance.OnPlacePoint;
            @PlacePoint.performed -= instance.OnPlacePoint;
            @PlacePoint.canceled -= instance.OnPlacePoint;
            @PanCameraLock.started -= instance.OnPanCameraLock;
            @PanCameraLock.performed -= instance.OnPanCameraLock;
            @PanCameraLock.canceled -= instance.OnPanCameraLock;
            @PanCameraMove.started -= instance.OnPanCameraMove;
            @PanCameraMove.performed -= instance.OnPanCameraMove;
            @PanCameraMove.canceled -= instance.OnPanCameraMove;
        }

        public void RemoveCallbacks(IDefaultMappingActions instance)
        {
            if (m_Wrapper.m_DefaultMappingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultMappingActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultMappingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultMappingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultMappingActions @DefaultMapping => new DefaultMappingActions(this);
    public interface IDefaultMappingActions
    {
        void OnZoom(InputAction.CallbackContext context);
        void OnPlacePoint(InputAction.CallbackContext context);
        void OnPanCameraLock(InputAction.CallbackContext context);
        void OnPanCameraMove(InputAction.CallbackContext context);
    }
}
